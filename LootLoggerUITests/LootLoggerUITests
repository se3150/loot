import XCTest

class LootLoggerUITests: XCTestCase {

    override func setUp() {
        // Put setup code here. This method is called before the invocation of each test method in the class.

        // In UI tests it is usually best to stop immediately when a failure occurs.
        continueAfterFailure = false

        // In UI tests itâ€™s important to set the initial state - such as interface orientation - required for your tests before they run. The setUp method is a good place to do this.
    }

    override func tearDown() {
        // Put teardown code here. This method is called after the invocation of each test method in the class.
    }

//    func testExample() {
//        // UI tests must launch the application that they test.
//        let app = XCUIApplication()
//        app.launch()
//
//        // Use recording to get started writing UI tests.
//        // Use XCTAssert and related functions to verify your tests produce the correct results.
//    }

//    func testLaunchPerformance() {
//        if #available(macOS 10.15, iOS 13.0, tvOS 13.0, *) {
//            // This measures how long it takes to launch your application.
//            measure(metrics: [XCTOSSignpostMetric.applicationLaunch]) {
//                XCUIApplication().launch()
//            }
//        }
//    }
    
    func testCreateLoot(){
        let app = XCUIApplication()
        app.launch()
        app.navigationBars["LootLogger"].buttons["Add"].tap()

        XCTAssert(app.tables.cells.count == 1)
        XCTAssert(app.staticTexts["New Loot #1"].exists)
    }
    
    func testUpdateLootName(){
        let app = XCUIApplication()
        app.launch()
        app.navigationBars["LootLogger"].buttons["Add"].tap()
        app.tables.cells.element(boundBy: 0).tap()
        let nameField = app.textFields["New Loot #1"]
        nameField.tap()
        app/*@START_MENU_TOKEN@*/.keys["delete"].press(forDuration: 1.6);/*[[".keyboards.keys[\"delete\"]",".tap()",".press(forDuration: 1.6);",".keys[\"delete\"]"],[[[-1,3,1],[-1,0,1]],[[-1,2],[-1,1]]],[0,0]]@END_MENU_TOKEN@*/
            
//        nameField.typeText("hello World")
        
        app/*@START_MENU_TOKEN@*/.keys["h"]/*[[".keyboards.keys[\"h\"]",".keys[\"h\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        app/*@START_MENU_TOKEN@*/.keys["e"]/*[[".keyboards.keys[\"e\"]",".keys[\"e\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        app/*@START_MENU_TOKEN@*/.keys["l"]/*[[".keyboards.keys[\"l\"]",".keys[\"l\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        app/*@START_MENU_TOKEN@*/.keys["l"]/*[[".keyboards.keys[\"l\"]",".keys[\"l\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        app/*@START_MENU_TOKEN@*/.keys["o"]/*[[".keyboards.keys[\"o\"]",".keys[\"o\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        app/*@START_MENU_TOKEN@*/.keys["space"]/*[[".keyboards.keys[\"space\"]",".keys[\"space\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        app/*@START_MENU_TOKEN@*/.buttons["shift"]/*[[".keyboards.buttons[\"shift\"]",".buttons[\"shift\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        app/*@START_MENU_TOKEN@*/.keys["W"]/*[[".keyboards.keys[\"W\"]",".keys[\"W\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        app/*@START_MENU_TOKEN@*/.keys["o"]/*[[".keyboards.keys[\"o\"]",".keys[\"o\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        app/*@START_MENU_TOKEN@*/.keys["r"]/*[[".keyboards.keys[\"r\"]",".keys[\"r\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        app/*@START_MENU_TOKEN@*/.keys["l"]/*[[".keyboards.keys[\"l\"]",".keys[\"l\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        app/*@START_MENU_TOKEN@*/.keys["d"]/*[[".keyboards.keys[\"d\"]",".keys[\"d\"]"],[[[-1,1],[-1,0]]],[0]]@END_MENU_TOKEN@*/.tap()
        
        app.navigationBars.buttons["LootLogger"].tap()
        
        XCTAssert(app.staticTexts["hello World"].exists)
    }
    
    func testDoubleUpdateName(){
        let app = XCUIApplication()
        app.launch()
        app.navigationBars["LootLogger"].buttons["Add"].tap()
        app.navigationBars["LootLogger"].buttons["Add"].tap()
        app.tables.cells.element(boundBy: 0).tap()
        var nameField = app.textFields["New Loot #1"]
        nameField.tap()
        app.keys["delete"].press(forDuration: 1.6);
        
        app.keys["h"].tap()
        app.keys["e"].tap()
        app.keys["l"].tap()
        app.keys["l"].tap()
        app.keys["o"].tap()
        app.keys["space"].tap()
        app.buttons["shift"].tap()
        app.keys["W"].tap()
        app.keys["o"].tap()
        app.keys["r"].tap()
        app.keys["l"].tap()
        app.keys["d"].tap()
        
        app.navigationBars.buttons["LootLogger"].tap()
        
        app.tables.cells.element(boundBy: 1).tap()
        nameField = app.textFields["New Loot #2"]
        nameField.tap()
        app.keys["delete"].press(forDuration: 1.6);
        
        app.keys["h"].tap()
        app.keys["e"].tap()
        app.keys["l"].tap()
        app.keys["l"].tap()
        app.keys["o"].tap()
        app.keys["space"].tap()
        app.keys["w"].tap()
        app.keys["o"].tap()
        app.keys["r"].tap()
        app.keys["l"].tap()
        app.keys["d"].tap()
        app.keys["more"].tap()
        app.keys["!"].tap()
        
        app.navigationBars.buttons["LootLogger"].tap()
        
        XCTAssert(app.staticTexts["hello World"].exists)
        XCTAssert(app.staticTexts["hello world!"].exists)
    }
    
    func testUpdateLootSerial(){
        let app = XCUIApplication()
        app.launch()
        app.navigationBars["LootLogger"].buttons["Add"].tap()
        app.tables.cells.element(boundBy: 0).tap()
        let serialField = app.textFields["12345678"]
        serialField.tap()
        app.keys["delete"].press(forDuration: 1.6);

        let moreKey = app.keys["more"]
        moreKey.tap()
        app.keys["8"].tap()
        app.keys["8"].tap()
        app.keys["8"].tap()
        
        
        app.navigationBars.buttons["LootLogger"].tap()
        
        XCTAssert(app.staticTexts["888"].exists)
    }
    
    func testUpdateLootValue(){
        let app = XCUIApplication()
        app.launch()
        app.navigationBars["LootLogger"].buttons["Add"].tap()
        app.tables.cells.element(boundBy: 0).tap()
        let valueField = app.textFields["99.00"]
        valueField.tap()
        app.keys["delete"].press(forDuration: 1.6);

        let moreKey = app.keys["more"]
        moreKey.tap()
        app.keys["5"].tap()
        
        
        app.navigationBars.buttons["LootLogger"].tap()
        
        XCTAssert(app.staticTexts["$5"].exists)
    }
    
    func testUpdateAll() {
        let app = XCUIApplication()
        app.launch()
        app.navigationBars["LootLogger"].buttons["Add"].tap()
        app.tables.cells.element(boundBy: 0).tap()
        
        let nameField = app.textFields["New Loot #1"]
        nameField.tap()
        app.keys["delete"].press(forDuration: 1.6);
        
        app.keys["h"].tap()
        app.keys["e"].tap()
        app.keys["l"].tap()
        app.keys["l"].tap()
        app.keys["o"].tap()
        app.keys["space"].tap()
        app.buttons["shift"].tap()
        app.keys["W"].tap()
        app.keys["o"].tap()
        app.keys["r"].tap()
        app.keys["l"].tap()
        app.keys["d"].tap()
        
        let serialField = app.textFields["12345678"]
        serialField.tap()
        app.keys["delete"].press(forDuration: 1.6);

        let moreKey = app.keys["more"]
        moreKey.tap()
        app.keys["7"].tap()
        app.keys["8"].tap()
        app.keys["7"].tap()
        
        let valueField = app.textFields["99.00"]
        valueField.tap()
        app.keys["delete"].press(forDuration: 1.6);

        moreKey.tap()
        app.keys["5"].tap()
        app.keys["5"].tap()
        app.keys["5"].tap()
        
        
        app.navigationBars.buttons["LootLogger"].tap()
        
        XCTAssert(app.tables.cells.count == 1)
        XCTAssert(app.staticTexts["hello World"].exists)
        XCTAssert(app.staticTexts["787"].exists)
        XCTAssert(app.staticTexts["$555"].exists)
    }
    
    func testDeleteLoot() {
        let app = XCUIApplication()
        app.launch()
        
        let navBar = app.navigationBars["LootLogger"]
        navBar.buttons["Add"].tap()
        navBar.buttons["Edit"].tap()
        
        
        app.tables.buttons["Remove New Loot #1, 12345678, $99"].tap()
        app.tables.buttons["Delete"].tap()
        
        XCTAssert(app.tables.cells.count == 0)
    }
    
    func testScroll() {
        let app = XCUIApplication()
        app.launch()
        
        let navBar = app.navigationBars["LootLogger"]
        for _ in 0...17 {
            navBar.buttons["Add"].tap()
        }
        
        app.tables.cells.firstMatch.swipeUp()
        
        XCTAssert(app.tables.cells.element(boundBy: 17).isHittable)
    }
    
    func testMultiDeleteLoot() {
        let app = XCUIApplication()
        app.launch()
        
        let navBar = app.navigationBars["LootLogger"]
        
        for _ in 0...17 {
            navBar.buttons["Add"].tap()
        }
        navBar.buttons["Edit"].tap()
        
        
        app.tables.buttons["Remove New Loot #1, 12345678, $99"].tap()
        app.tables.buttons["Delete"].tap()
        
        app.tables.cells.firstMatch.swipeUp()
        
        app.tables.buttons["Remove New Loot #14, 12345678, $99"].tap()
        app.tables.buttons["Delete"].tap()
        
        XCTAssert(app.tables.cells.count == 16)
        XCTAssertEqual(app.staticTexts["New Loot #1"].exists, false)
        XCTAssertEqual(app.staticTexts["New Loot #14"].exists, false)
    }
    
    func testRecycler(){
        let app = XCUIApplication()
        app.launch()
        app.navigationBars["LootLogger"].buttons["Add"].tap()
        app.tables.cells.element(boundBy: 0).tap()
        let nameField = app.textFields["New Loot #1"]
        nameField.tap()
        app.keys["delete"].press(forDuration: 1.6);
        
        app.keys["h"].tap()
        app.keys["e"].tap()
        app.keys["l"].tap()
        app.keys["l"].tap()
        app.keys["o"].tap()
        
        app.navigationBars.buttons["LootLogger"].tap()
        
        for _ in 0...20 {
            app.navigationBars["LootLogger"].buttons["Add"].tap()
        }
        app.navigationBars["LootLogger"].buttons["Edit"].tap()
        app.tables.buttons["Remove New Loot #2, 12345678, $99"].tap()
        app.tables.buttons["Delete"].tap()
        
        app.navigationBars["LootLogger"].buttons["Done"].tap()
        app.tables.cells.firstMatch.swipeUp()
        app.tables.cells.element(boundBy: 15).swipeDown()
        
        
        XCTAssert(app.staticTexts["hello"].exists)
        XCTAssertEqual(app.staticTexts["New Loot #2"].exists, false)
    }
}
